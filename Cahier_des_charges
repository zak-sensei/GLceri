Cahier des charges 


Membre de l'équipe de la conception du projet constitué de 4 étudiants du CERI  Avignon :

-MAGHNOUJI Zakaria
-MABANO Amrani
-FRANC Thomas
-FAZIO Adrien


1. Introduction

Coordinateur :Thomas Franc
Testeur : Zakaria Maghnouji
Intégrateur : Amrani Mabano
Programmeur : Adrien Fazio

Il s'agit de développer un composant logiciel permettant de manipuler de très grandes matrices creuses .

Résumé : logiciel en ligne de commande (avec accès fichier) qui manipule de très grande matrices 
(P lignes > 1000 et N colonnes > 1000) creuses c'est-à-dire que les cases de la matrice doivent contenir 95 % de zéros.
Ce logiciel s'inscrit dans le domaine des mathématiques et de l'algèbre.

Notre travail consistera à développer une librairie qui permettra d'effectuer des opérations arithmétiques élémentaires, 
des opérations d'entrée-sortie.

Critères d'acceptabilité : le composant répond aux besoins fonctionnels ennoncés ci-après.

2. Matériel
        
        Pour développer cette librairie nous utiliserons divers outils. Le système d'exploitation sur lequel nous 
        évoluerons est: Ubuntu 13.04.
        Notre compilateur sera: g++ (Ubuntu/Linaro 4.7.3-1ubuntu1) 4.7.3.
        Il n'y a pas de logiciel imposé pour le codage, chaque membre de l'équipe utilisera celui de son choix. 
        On évitera simplement les IDE au profit d'éditeurs de texte plus simplistes.
        La documentation du code sera fournie à l'aide du générateur doxygen , qui permettra d'avoir une documentation 
        homogène avec les "standards" utilisés de nos jours .
        Ceci servira à améliorer la compréhension et la réutilisabilité du code ; et engendrera une meilleure harmonie 
        entre les différents corps de la conception.
        Nous utiliserons le profiler intégré dans Ubuntu avec l'option -pg lors de la compilation et la commande gprof.
        Nous ferons appel à la forge Github pour coordonner nos travaux.


3. Besoins fonctionnels
      
        Notre librairie proposera divers opérations arithmétiques élémentaires.
        
        La première est l'addition de deux matrices, elle prendra deux matrices en argument et additionnera chaque case 
        de la première matrice à celle de même position dans la seconde matrice. La contrainte qu'implique cette 
        opération est que les deux matrices devront obligatoirement être de même dimension.
        
        Ensuite, la soustraction. Elle fonctionnera dans les mêmes conditions que l'addition.Elle soustraira chaque case
        de la première matrice à la case équivalente de la deuxième.
        
        La troisième opération est la multliplication. L'utilisateur pourra effectuer la multiplication de deux matrices.
        Cette opération créera une troisième matrice qui contiendra les résultats. Dans cette troisième matrice, le 
        résultat situé dans la ligne i à la colonne j sera le produit de la ligne i de la première matrice par la colonne
        j de la deuxième. Cette opération impose une contrainte: le nombre de colonne de la première matrice devra être 
        égal au nombre de ligne de la deuxième.
        La deuxième multiplication possible consistera à multiplier chaque case d'une matrice à un entier.
        
        La division de chaque case d'une matrice par un entier sera également possible.
        
        Notre librairie permettra également de calculer le carré d'une matrice, en multipliant chaque case d'une matrice
        à elle même.
        
        Ensuite, on pourra obtenir la transposée d'une matrice. Celle-ci créera une deuxième matrice dans laquelle les
        lignes deviennent les colonnes et les colonnes deviennent les lignes. Les valeurs sont donc inversées.
        
        Elle gèrera les entrées-sorties dans un fichier. Elle permettra donc de lire dans un fichier .txt les valeurs
        à insérer dans une matrice creuse. Elle pourra également écrire dans un fichier .txt les valeurs des cases
        où il n'y pas de 0.

4. Besoins non fonctionnels
        
        Des opérations pourraient être éventuellement ajoutées à notre librairie si nous avons le temps et les moyens.
        
        Premièrement, une interface graphique pourrait intervenir pour faciliter l'utilisation de la librairie et la 
        rendre plus accessible.
        
        Ensuite, une fonctionnalité pourrait être créée, elle permettrait de rechercher une valeur particulière dans une
        matrice et son occurrence si elle apparait plusieurs fois.
        
        Une autre fonction pourrait indiquer si une matrice est inversible, et calculer son inverse si c'est le cas.

5. Sous ensemble et priorités d'implémentation
        
        Notre librairie sera développée en plusieurs étapes réparties en périodes variables.
        
        Premièrement, nous allons imaginer la structure de nos matrices pendant environ 1 semaine.
        Ensuite, nous allons implémenter les méthodes de création et d'affichage des matrices grâce à des fichiers .txt
        sur une durée de 1 semaine. 
        
        Puis, nous commencerons à développer les fonctions d'addition, de soustraction, de multiplication, de division
        et de calcul de transposée durant 2 semaines et demie.
        
        Ensuite, 3 semaines pour tester les performances de notre librairies, l'améliorer si besoin et éventuellement y 
        apporter des modifications en ajoutant des fonctionnalités.
        
        Notre librairie sera donc disponible à travers 3 versions au cours du temps, la première contiendra les fonctionnalités
        de création et d'affichage des matrices, la deuxième permettra d'effectuer les opérations élémentaires d'addition,
        de soustraction, multiplication, de division et de transposée et la dernière version sera la plus performante,
        efficace et comportera éventuellement des fonctionnalités supplémentaires.
        
        La version finale de la librairie sera accompagnée d'un manuel utilisateur et d'un rapport de test.
        
6. Information de maintenance
        Il se peut que, une fois le logiciel opérationnel, certaines parties soient davantage susceptibles d'évoluer que d'autres (évolution du matériel, changement des besoins des utilisateurs, etc). L'indiquer dans le cahier des charges permet de construire le logiciel de manière à faciliter son évolution.

7. Glossaire
        Le glossaire contient la définition des termes techniques utilisés dans le cahier des charges. Il ne faut supposer aucune connaissance technique particulière de la part du client auquel est destiné le cahier des charges. 
